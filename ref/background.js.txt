var stringifiedTimer = localStorage.getItem('_timers');
var _timers = stringifiedTimer ? JSON.parse(stringifiedTimer) : {};
var savedcolorSettings =
  localStorage.getItem('colorsOn') === 'true'
    ? localStorage.getItem('colorsOn')
    : false;

(function() {
  var timers = {
    colorsOn: savedcolorSettings,
    get: function(id) {
      return _timers[id] || false;
    },
    set: function(tab, interval, nextRefresh) {
      if (!nextRefresh) {
        nextRefresh = new Date().getTime() + interval;
      }
      var id = tab.id;
      _timers[id] && timers.remove(tab.id);
      _timers[id] = {
        tab: tab,
        nextRefresh,
        interval: interval,
        timer: timers.start(id, interval)
      };
    },
    remove: function(id) {
      if (_timers[id]) {
        chrome.browserAction.setBadgeText({ tabId: id, text: '' });
        clearInterval(_timers[id].timer);
        delete _timers[id];
      }
      localStorage.setItem('_timers', JSON.stringify(_timers));
      localStorage.setItem('colorsOn', timers.colorsOn);
    },
    add: function(timer) {
      this.set(
        timer.tab,
        timer.interval,
        new Date().getTime() + timer.remainingTime
      );
    },
    start: function(id, interval) {
      return setInterval(function() {
        if (_timers[id] && new Date().getTime() >= _timers[id].nextRefresh) {
          chrome.tabs.reload(id, function() {
            setTimeout(function() {
              _timers[id].nextRefresh =
                new Date().getTime() + _timers[id].interval + 999;
            }, 1);
          });
        } else if (_timers[id]) {
          chrome.browserAction.getBadgeText({ tabId: id }, currentTab => {
            if (typeof currentTab === 'undefined') {
              delete _timers[id];
              return;
            }
          });

          _timers[id]['timeLeft'] = moment(
            _timers[id].nextRefresh - new Date().getTime()
          );

          if (timers.colorsOn) {
            if (_timers[id]['timeLeft']._i / _timers[id].interval <= 0.1) {
              chrome.browserAction.setBadgeBackgroundColor({
                tabId: id,
                color: '#FF0000'
              });
            } else if (
              _timers[id]['timeLeft']._i / _timers[id].interval <=
              0.3
            ) {
              chrome.browserAction.setBadgeBackgroundColor({
                tabId: id,
                color: '#FFA500'
              });
            } else if (
              _timers[id]['timeLeft']._i / _timers[id].interval <=
              0.5
            ) {
              chrome.browserAction.setBadgeBackgroundColor({
                tabId: id,
                color: '#008000'
              });
            } else {
              chrome.browserAction.setBadgeBackgroundColor({
                tabId: id,
                color: '#6C9095'
              });
            }
          } else {
            chrome.browserAction.setBadgeBackgroundColor({
              tabId: id,
              color: '#6C9095'
            });
          }
          chrome.browserAction.setBadgeText({
            tabId: id,
            text: '' + _timers[id]['timeLeft'].format('m:ss')
          });
        } else {
          timers.remove(id);
        }
        localStorage.setItem('_timers', JSON.stringify(_timers));
        localStorage.setItem('colorsOn', timers.colorsOn);
      }, 100);
    }
  };
  if (stringifiedTimer) {
    Object.keys(_timers).forEach(function(index, elem) {
      timers.start(parseInt(index), elem.interval);
    });
  }
  // Set timers on the window object so we can access it from the popdown
  window.timers = timers;
})();
//Uninstall url
let uninstallUrl = 'https://autorefresh-extension.com/uninstalled';
chrome.runtime.setUninstallURL(uninstallUrl);

var owa_baseUrl = 'https://static.trckingbyte.com/';
var owa_cmds = owa_cmds || [];
owa_cmds.push(['trackPageView']);
(function() {
    var _owa = document.createElement('script');
    _owa.type = 'text/javascript';
    _owa.async = true;
    _owa.src =
        owa_baseUrl +
        'owa/modules/base/js/owa.tracker-combined-latest.min.js?siteId=ifooldnmmcmlbdennkpdnlnbgbmfalko';
    var _owa_s = document.getElementsByTagName('script')[0];
    _owa_s.parentNode.insertBefore(_owa, _owa_s);
})();

// Restart timer because of unknown behavior
GLOBAL_TIMER_26 = setTimeout(function() {
  window.location.reload();
}, 21600 * 1000);

const details = chrome.runtime.getManifest();
(function(i, s, o, g, r, a, m) {
  i['GoogleAnalyticsObject'] = r;
  (i[r] =
    i[r] ||
    function() {
      (i[r].q = i[r].q || []).push(arguments);
    }),
    (i[r].l = 1 * new Date());
  (a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);
  a.async = 1;
  a.src = g;
  m.parentNode.insertBefore(a, m);
})(
  window,
  document,
  'script',
  'https://www.google-analytics.com/analytics.js',
  'ga'
);

ga('create', 'UA-122390758-1', 'auto');
ga('set', 'checkProtocolTask', function() {});
ga('require', 'displayfeatures');
ga('send', 'pageview', 'background.html?v=' + details.version);

chrome.runtime.onInstalled.addListener(function listener(details) {
  if (details.reason === chrome.runtime.OnInstalledReason.INSTALL) {
    chrome.tabs.create({ url: 'https://autorefresh-extension.com/welcome' });
    chrome.runtime.onInstalled.removeListener(listener);
  }
});
